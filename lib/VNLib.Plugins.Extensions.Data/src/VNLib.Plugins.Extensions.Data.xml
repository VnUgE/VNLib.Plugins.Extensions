<?xml version="1.0"?>
<!--
Copyright (c) 2022 Vaughn Nugent
-->
<doc>
    <assembly>
        <name>VNLib.Plugins.Extensions.Data</name>
    </assembly>
    <members>
        <member name="T:VNLib.Plugins.Extensions.Data.Abstractions.IBulkDataStore`1">
            <summary>
            An abstraction that defines a Data-Store that supports 
            bulk data operations
            </summary>
            <typeparam name="T">The data-model type</typeparam>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IBulkDataStore`1.DeleteBulkAsync(System.Collections.Generic.ICollection{`0})">
             <summary>
             Deletes a collection of records from the store
             </summary>
             <param name="records">A collection of records to delete</param>
            <returns>A task the resolves the number of entires removed from the store</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IBulkDataStore`1.UpdateBulkAsync(System.Collections.Generic.ICollection{`0})">
            <summary>
            Updates a collection of records
            </summary>
            <param name="records">The collection of records to update</param>
            <returns>A task the resolves an error code (should evaluate to false on failure, and true on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IBulkDataStore`1.CreateBulkAsync(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a bulk collection of records as entries in the store
            </summary>
            <param name="records">The collection of records to add</param>
            <returns>A task the resolves an error code (should evaluate to false on failure, and true on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IBulkDataStore`1.AddOrUpdateBulkAsync(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates or updates individual records from a bulk collection of records
            </summary>
            <param name="records">The collection of records to add</param>
            <returns>A task the resolves an error code (should evaluate to false on failure, and true on success)</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1">
            <summary>
            An abstraction that defines a Data-Store and common 
            operations that retrieve or manipulate records of data
            </summary>
            <typeparam name="T">The data-model type</typeparam>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetCountAsync">
            <summary>
            Gets the total number of records in the current store
            </summary>
            <returns>A task that resolves the number of records in the store</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetCountAsync(System.String)">
            <summary>
            Gets the number of records that belong to the specified constraint
            </summary>
            <param name="specifier">A specifier to constrain the reults</param>
            <returns>The number of records that belong to the specifier</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetSingleAsync(System.String)">
            <summary>
            Gets a record from its key
            </summary>
            <param name="key">The key identifying the unique record</param>
            <returns>A promise that resolves the record identified by the specified key</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetSingleAsync(System.String[])">
            <summary>
            Gets a record from its key
            </summary>
            <param name="specifiers">A variable length specifier arguemnt array for retreiving a single application</param>
            <returns></returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetSingleAsync(`0)">
            <summary>
            Gets a record from the store with a partial model, intended to complete the model
            </summary>
            <param name="record">The partial model used to query the store</param>
            <returns>A task the resolves the completed data-model</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetCollectionAsync(System.Collections.Generic.ICollection{`0},System.String,System.Int32)">
            <summary>
            Fills a collection with enires retireved from the store using the specifer
            </summary>
            <param name="collection">The collection to add entires to</param>
            <param name="specifier">A specifier argument to constrain results</param>
            <param name="limit">The maximum number of elements to retrieve</param>
            <returns>A Task the resolves to the number of items added to the collection</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.GetCollectionAsync(System.Collections.Generic.ICollection{`0},System.Int32,System.String[])">
            <summary>
            Fills a collection with enires retireved from the store using a variable length specifier
            parameter
            </summary>
            <param name="collection">The collection to add entires to</param>
            <param name="limit">The maximum number of elements to retrieve</param>
            <param name="args"></param>
            <returns>A Task the resolves to the number of items added to the collection</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.UpdateAsync(`0)">
            <summary>
            Updates an entry in the store with the specified record
            </summary>
            <param name="record">The record to update</param>
            <returns>A task the resolves an error code (should evaluate to false on failure, and true on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.CreateAsync(`0)">
            <summary>
            Creates a new entry in the store representing the specified record
            </summary>
            <param name="record">The record to add to the store</param>
            <returns>A task the resolves an error code (should evaluate to false on failure, and true on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.DeleteAsync(`0)">
            <summary>
            Deletes one or more entrires from the store matching the specified record
            </summary>
            <param name="record">The record to remove from the store</param>
            <returns>A task the resolves the number of records removed(should evaluate to false on failure, and deleted count on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.DeleteAsync(System.String)">
            <summary>
            Deletes one or more entires from the store matching the specified unique key
            </summary>
            <param name="key">The unique key that identifies the record</param>
            <returns>A task the resolves the number of records removed(should evaluate to false on failure, and deleted count on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.DeleteAsync(System.String[])">
            <summary>
            Deletes one or more entires from the store matching the supplied specifiers
            </summary>
            <param name="specifiers">A variable length array of specifiers used to delete one or more entires</param>
            <returns>A task the resolves the number of records removed(should evaluate to false on failure, and deleted count on success)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IDataStore`1.AddOrUpdateAsync(`0)">
            <summary>
            Updates an entry in the store if it exists, or creates a new entry if one does not already exist
            </summary>
            <param name="record">The record to add to the store</param>
            <returns>A task the resolves the result of the operation</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.Abstractions.IPaginatedDataStore`1">
            <summary>
            Defines a Data-Store that can retirieve and manipulate paginated 
            data
            </summary>
            <typeparam name="T">The data-model type</typeparam>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IPaginatedDataStore`1.GetPageAsync(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <summary>
            Gets a collection of records using a pagination style query, and adds the records to the collecion
            </summary>
            <param name="collection">The collection to add records to</param>
            <param name="page">Pagination page to get records from</param>
            <param name="limit">The maximum number of items to retrieve from the store</param>
            <returns>A task that resolves the number of items added to the collection</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.Abstractions.IPaginatedDataStore`1.GetPageAsync(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32,System.String[])">
            <summary>
            Gets a collection of records using a pagination style query with constraint arguments, and adds the records to the collecion
            </summary>
            <param name="collection">The collection to add records to</param>
            <param name="page">Pagination page to get records from</param>
            <param name="limit">The maximum number of items to retrieve from the store</param>
            <param name="constraints">A params array of strings to constrain the result set from the db</param>
            <returns>A task that resolves the number of items added to the collection</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.Abstractions.IUserEntity">
            <summary>
            Defines an entity base that has an owner, identified by its user-id
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.Abstractions.IUserEntity.UserId">
            <summary>
            The user-id of the owner of the entity
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.DbModelBase">
            <summary>
            Provides a base for DBSet Records with a timestamp/version
            a unique ID key, and create/modified timestamps
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.DbModelBase.Id">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.DbModelBase.Version">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.DbModelBase.Created">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.DbModelBase.LastModified">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.DbStore`1">
            <summary>
            Implements basic data-store functionality with abstract query builders
            </summary>
            <typeparam name="T">A <see cref="T:VNLib.Plugins.Extensions.Data.DbModelBase"/> implemented type</typeparam>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.DbStore`1.RecordIdBuilder">
            <summary>
            Gets a unique ID for a new record being added to the store
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.NewContext">
            <summary>
            Gets a new <see cref="T:VNLib.Plugins.Extensions.Data.TransactionalDbContext"/> ready for use
            </summary>
            <returns></returns>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.DbStore`1.ListRental">
            <summary>
            An object rental for entity collections
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.CreateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.AddOrUpdateQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,`0)">
            <summary>
            Builds a query that attempts to get a single entry from the 
            store based on the specified record if it does not have a 
            valid <see cref="P:VNLib.Plugins.Extensions.Data.DbModelBase.Id"/> property
            </summary>
            <param name="context">The active context to query</param>
            <param name="record">The record to search for</param>
            <returns>A query that yields a single record if it exists in the store</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.UpdateQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,`0)">
            <summary>
            Builds a query that attempts to get a single entry from the 
            store to update based on the specified record 
            </summary>
            <param name="context">The active context to query</param>
            <param name="record">The record to search for</param>
            <returns>A query that yields a single record to update if it exists in the store</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.OnRecordUpdate(`0,`0)">
            <summary>
            Updates the current record (if found) to the new record before
            storing the updates.
            </summary>
            <param name="newRecord">The new record to capture data from</param>
            <param name="currentRecord">The current record to be updated</param>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.DeleteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.DeleteAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.DeleteAsync(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.DeleteQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String[])">
            <summary>
            Builds a query that results in a single entry to delete from the 
            constraint arguments
            </summary>
            <param name="context">The active context</param>
            <param name="constraints">A variable length parameter array of query constraints</param>
            <returns>A query that yields a single record (or no record) to delete</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCollectionAsync(System.Collections.Generic.ICollection{`0},System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCollectionAsync(System.Collections.Generic.ICollection{`0},System.Int32,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCollectionQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String)">
            <summary>
            Builds a query to get a count of records constrained by the specifier
            </summary>
            <param name="context">The active context to run the query on</param>
            <param name="specifier">The specifier constrain</param>
            <returns>A query that can be counted</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCollectionQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String[])">
            <summary>
            Builds a query to get a collection of records based on an variable length array of parameters
            </summary>
            <param name="context">The active context to run the query on</param>
            <param name="constraints">An arguments array to constrain the results of the query</param>
            <returns>A query that returns a collection of records from the store</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCountAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetCountQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String)">
            <summary>
            Builds a query to get a count of records constrained by the specifier
            </summary>
            <param name="context">The active context to run the query on</param>
            <param name="specifier">The specifier constrain</param>
            <returns>A query that can be counted</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetSingleAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetSingleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetSingleAsync(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetSingleQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String[])">
            <summary>
            Builds a query to get a single record from the variable length parameter arguments
            </summary>
            <param name="context">The context to execute query against</param>
            <param name="constraints">Arguments to constrain the results of the query to a single record</param>
            <returns>A query that yields a single record</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetSingleQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,`0)">
            <summary>
            <para>
            Builds a query to get a single record from the specified record.
            </para>
            <para>
            Unless overridden, performs an ID based query for a single entry
            </para>
            </summary>
            <param name="context">The context to execute query against</param>
            <param name="record">A record to referrence the lookup</param>
            <returns>A query that yields a single record</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetPageAsync(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetPageAsync(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.DbStore`1.GetPageQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String[])">
            <summary>
            Builds a query to get a collection of records based on an variable length array of parameters
            </summary>
            <param name="context">The active context to run the query on</param>
            <param name="constraints">An arguments array to constrain the results of the query</param>
            <returns>A query that returns a paginated collection of records from the store</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.IDbModel">
            <summary>
            Represents a basic data model for an EFCore entity
            for support in data-stores
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.IDbModel.Id">
            <summary>
            A unique id for the entity
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.IDbModel.Created">
            <summary>
            The <see cref="T:System.DateTimeOffset"/> the entity was created in the store
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.IDbModel.LastModified">
            <summary>
            The <see cref="T:System.DateTimeOffset"/> the entity was last modified in the store
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.IDbModel.Version">
            <summary>
            Entity concurrency token
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Data.ProtectedDbStore`1">
            <summary>
            A data store that provides unique identities and protections based on an entity that has an owner <see cref="T:VNLib.Plugins.Extensions.Data.Abstractions.IUserEntity"/>
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedDbStore`1.GetCollectionQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedDbStore`1.GetSingleQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,System.String[])">
            <summary>
            Gets a single item contrained by a given user-id and item id
            </summary>
            <param name="context"></param>
            <param name="constraints"></param>
            <returns></returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedDbStore`1.GetSingleQueryBuilder(VNLib.Plugins.Extensions.Data.TransactionalDbContext,`0)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedEntityExtensions.UpdateAsync``1(VNLib.Plugins.Extensions.Data.Abstractions.IDataStore{``0},``0,System.String)">
            <summary>
            Updates the specified record within the store
            </summary>
            <param name="store"></param>
            <param name="record">The record to update</param>
            <param name="userId">The userid of the record owner</param>
            <returns>A task that evaluates to the number of records modified</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedEntityExtensions.CreateAsync``1(VNLib.Plugins.Extensions.Data.Abstractions.IDataStore{``0},``0,System.String)">
            <summary>
            Updates the specified record within the store
            </summary>
            <param name="store"></param>
            <param name="record">The record to update</param>
            <param name="userId">The userid of the record owner</param>
            <returns>A task that evaluates to the number of records modified</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedEntityExtensions.GetSingleAsync``1(VNLib.Plugins.Extensions.Data.Abstractions.IDataStore{``0},System.String,System.String)">
            <summary>
            Gets a single entity from its ID and user-id
            </summary>
            <param name="store"></param>
            <param name="key">The unique id of the entity</param>
            <param name="userId">The user's id that owns the resource</param>
            <returns>A task that resolves the entity or null if not found</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.ProtectedEntityExtensions.DeleteAsync``1(VNLib.Plugins.Extensions.Data.Abstractions.IDataStore{``0},System.String,System.String)">
            <summary>
            Deletes a single entiry by its ID only if it belongs to the speicifed user
            </summary>
            <param name="store"></param>
            <param name="key">The unique id of the entity</param>
            <param name="userId">The user's id that owns the resource</param>
            <returns>A task the resolves the number of eneities deleted (should evaluate to true or false)</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.#ctor">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Data.TransactionalDbContext.Transaction">
            <summary>
            The transaction that was opened on the current context
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.OpenTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Opens a single transaction on the current context. If a transaction is already open, 
            it is disposed and a new transaction is begun.
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Commit"/> on the current context
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.RollbackTransctionAsync(System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Rollback"/> on the current context
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Data.TransactionalDbContext.DisposeAsync">
            <inheritdoc/>
        </member>
    </members>
</doc>
